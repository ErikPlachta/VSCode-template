"""my_work_assistant.github_manager.builder

Render managed GitHub files from bundled templates.
"""
from __future__ import annotations

from pathlib import Path
from typing import Any

from jinja2 import Template

from ..core.config import CONFIG_ROOT, load_config
from ..core.exceptions import GitHubFileError

__all__ = ["DISCLAIMER", "render_templates"]

DISCLAIMER = "⚙️  This file is generated and managed by the My Work Assistant MCP Server."


def _load_template(path: Path) -> Template:
    """Load a Jinja2 template from disk.

    Args:
        path: Path to the template file.

    Returns:
        A compiled Jinja2 template instance.

    Raises:
        GitHubFileError: If the template cannot be read.

    Example:
        >>> isinstance(_load_template(Path('sample.j2')), Template)  # doctest: +SKIP
    """

    try:
        return Template(path.read_text(encoding="utf-8"))
    except OSError as exc:  # pragma: no cover
        raise GitHubFileError("Failed to read template", {"path": str(path)}) from exc


def _write_file(target: Path, content: str) -> None:
    """Write rendered content to disk respecting disclaimers.

    Args:
        target: Output file path.
        content: Rendered template content.

    Raises:
        GitHubFileError: If writing fails or disclaimer safeguards are triggered.

    Example:
        >>> _write_file(Path('tmp.md'), 'content')  # doctest: +SKIP
    """

    if target.exists():
        existing = target.read_text(encoding="utf-8")
        if DISCLAIMER not in existing:
            raise GitHubFileError("Refusing to overwrite unmanaged file", {"path": str(target)})
    target.parent.mkdir(parents=True, exist_ok=True)
    target.write_text(content, encoding="utf-8")


def render_templates() -> list[Path]:
    """Render configured templates into the repository.

    Returns:
        A list of paths that were rendered or refreshed.

    Raises:
        GitHubFileError: If rendering fails.

    Example:
        >>> render_templates()  # doctest: +SKIP
    """

    config = load_config()["github_manager"]
    rendered: list[Path] = []
    template_root = CONFIG_ROOT.parent / "github"
    if config.get("copilot_instructions_enabled", True):
        path = template_root / "copilot-instructions.md.j2"
        target = Path(".github") / "copilot-instructions.md"
        template = _load_template(path)
        _write_file(target, template.render(additional_notes="These instructions are managed."))
        rendered.append(target)
    if config.get("instructions_enabled", True):
        path = template_root / "instructions" / "default-guidelines.instructions.md.j2"
        target = Path(".github") / "instructions" / "default-guidelines.instructions.md"
        template = _load_template(path)
        _write_file(target, template.render(body="- Follow the docs."))
        rendered.append(target)
    if config.get("prompts_enabled", True):
        for template_name in [
            "document-api.prompt.md.j2",
            "review-code.prompt.md.j2",
            "onboarding-plan.prompt.md.j2",
        ]:
            template = _load_template(template_root / "prompts" / template_name)
            target = Path(".github") / "prompts" / template_name.replace(".j2", "")
            _write_file(target, template.render(body="Generated by My Work Assistant."))
            rendered.append(target)
    if config.get("chatmodes_enabled", True):
        for template_name in ["reviewer.chatmode.md.j2", "docwriter.chatmode.md.j2"]:
            template = _load_template(template_root / "chatmodes" / template_name)
            target = Path(".github") / "chatmodes" / template_name.replace(".j2", "")
            _write_file(target, template.render(body="Generated persona."))
            rendered.append(target)
    return rendered

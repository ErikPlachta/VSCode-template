[build-system]
requires = ["setuptools>=67", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "my_work_assistant"
version = "0.1.0"
description = "My Work Assistant MCP server"
authors = [{name = "Erik Plachta"}]
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
dependencies = [
    "fastapi",
    "typer",
    "pydantic>=2",
    "jinja2",
    "jsonschema",
    "watchdog",
    "uvicorn",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "mypy",
    "ruff",
    "httpx",
]

[tool.setuptools.packages.find]
where = ["my_work_assistant/src"]

[tool.setuptools.package-data]
my_work_assistant = ["py.typed"]

[tool.pytest.ini_options]
addopts = "--maxfail=1 --disable-warnings"
filterwarnings = ["error"]
markers = [
    "docstring",
    "typing",
]

[tool.mypy]
python_version = "3.12"
strict = true
packages = ["my_work_assistant"]
# Exclude tests from type checking to keep focus on library code; tests are validated via runtime pytest.
exclude = [
    "my_work_assistant/src/my_work_assistant/tests/",
]

# Relax checks for tests and vendored shims; keep strict for library code.
[[tool.mypy.overrides]]
module = [
    "my_work_assistant.tests.*",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "typer.*",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "jsonschema",
    "jsonschema.*",
]
ignore_missing_imports = true

[tool.ruff]
# Adopt a wider line length and move lint config to [tool.ruff.lint]
line-length = 120
extend-exclude = [
    "my_work_assistant/src/fastapi/**",
    "my_work_assistant/src/jinja2/**",
    "my_work_assistant/src/jsonschema/**",
    "my_work_assistant/src/pydantic/**",
    "my_work_assistant/src/typer/**",
]

[tool.ruff.lint]
# Enable core rules and pydocstyle (D) for docstring quality.
select = ["E", "F", "I", "D"]
# Ignore long-line errors globally, and relax D415 (first line punctuation) to reduce churn.
ignore = ["E501", "D415"]

# Tame a few noisy files that intentionally re-export or use broad imports. # TODO: Verify this is the right way to handle the problem. 
[tool.ruff.lint.per-file-ignores]
# Allow unused variables in tests and silence docstring requirements there.
"my_work_assistant/src/my_work_assistant/tests/**" = ["F841", "D"]
# Relax module/package docstring requirements for __init__ files.
"**/__init__.py" = ["D100", "D104", "D105", "D107"]

[tool.ruff.lint.pydocstyle]
convention = "google"

